# Copyright 2021 Open Policy Agent
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# https://raw.githubusercontent.com/open-policy-agent/gatekeeper-library/master/library/pod-security-policy/seccomp/template.yaml
apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: pspseccomp
  annotations:
    description: Controls the seccomp profile used by containers.
spec:
  crd:
    spec:
      names:
        kind: PSPSeccomp
      validation:
        # Schema for the `parameters` field
        openAPIV3Schema:
          type: object
          properties:
            allowedProfiles:
              type: array
              items:
                type: string
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package pspseccomp

        violation[{"msg": msg, "details": {}}] {
          metadata := input.review.object.metadata
          not input_wildcard_allowed(metadata)
          container := input_containers[_]
          not input_container_allowed(metadata, container)
          msg := sprintf("Seccomp profile is not allowed, pod: %v, container: %v, Allowed profiles: %v", [metadata.name, container.name, input.parameters.allowedProfiles])
        }

        input_wildcard_allowed(metadata) {
          input.parameters.allowedProfiles[_] == "*"
        }

        input_container_allowed(metadata, container) {
          not get_container_profile(metadata, container)
          metadata.annotations["seccomp.security.alpha.kubernetes.io/pod"] == input.parameters.allowedProfiles[_]
        }

        input_container_allowed(metadata, container) {
          profile := get_container_profile(metadata, container)
          profile == input.parameters.allowedProfiles[_]
        }

        get_container_profile(metadata, container) = profile {
          value := metadata.annotations[key]
            startswith(key, "container.seccomp.security.alpha.kubernetes.io/")
            [prefix, name] := split(key, "/")
            name == container.name
            profile = value
        }

        input_containers[c] {
          c := input.review.object.spec.containers[_]
        }

        input_containers[c] {
          c := input.review.object.spec.initContainers[_]
        }
