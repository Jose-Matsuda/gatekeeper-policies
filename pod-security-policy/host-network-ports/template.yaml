# Copyright 2021 Open Policy Agent
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# https://raw.githubusercontent.com/open-policy-agent/gatekeeper-library/master/library/pod-security-policy/host-network-ports/template.yaml
apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: psphostnetworkingports
  annotations:
    description: Controls usage of host networking and ports.
spec:
  crd:
    spec:
      names:
        kind: PSPHostNetworkingPorts
      validation:
        # Schema for the `parameters` field
        openAPIV3Schema:
          type: object
          properties:
            hostNetwork:
              type: boolean
            min:
              type: integer
            max:
              type: integer
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package psphostnetworkingports

        violation[{"msg": msg, "details": {}}] {
          input_share_hostnetwork(input.review.object)
          msg := sprintf("The specified hostNetwork and hostPort are not allowed, pod: %v. Allowed values: %v", [input.review.object.metadata.name, input.parameters])
        }

        input_share_hostnetwork(o) {
          not input.parameters.hostNetwork
          o.spec.hostNetwork
        }

        input_share_hostnetwork(o) {
          hostPort := input_containers[_].ports[_].hostPort
          hostPort < input.parameters.min
        }

        input_share_hostnetwork(o) {
          hostPort := input_containers[_].ports[_].hostPort
          hostPort > input.parameters.max
        }

        input_containers[c] {
          c := input.review.object.spec.containers[_]
        }

        input_containers[c] {
          c := input.review.object.spec.initContainers[_]
        }
